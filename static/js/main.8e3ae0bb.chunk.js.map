{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleEditorChange","e","console","log","target","getContent","react_default","a","createElement","ts","initialValue","apiKey","init","plugins","selector","toolbar","textpattern_patterns","start","cmd","value","list-style-type","onChange","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPA0DeA,6MAtDbC,mBAAqB,SAACC,GACpBC,QAAQC,IAAI,uBAAwBF,EAAEG,OAAOC,uFAI7C,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,aAAa,mDACbC,OAAO,mDACPC,KAAO,CAILC,QAAS,4CACTC,SAAU,WAGVC,QAAS,sFAETC,qBAAsB,CAGpB,CAAEC,MAAO,KAAMC,IAAK,sBAAuBC,MAAO,CAAEC,kBAAmB,WAEvE,CAAEH,MAAO,MAAOC,IAAK,sBAAuBC,MAAO,CAAEC,kBAAmB,SAExE,CAAEH,MAAO,KAAMC,IAAK,sBAAuBC,MAAO,CAAEC,kBAAmB,WAIvE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,YACtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,YAEtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBACtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBAEtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBACtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBAEtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBACtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBAEtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBACtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,gBAEtE,CAAEH,MAAO,MAAOC,IAAK,oBAAqBC,MAAO,CAAEC,kBAAmB,kBAG1EC,SAAWC,KAAKtB,4BAjDNuB,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8e3ae0bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nclass App extends React.Component {\r\n  handleEditorChange = (e) => {\r\n    console.log('Content was updated:', e.target.getContent());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Editor\r\n        initialValue=\"<p>This is the initial content of the editor</p>\"\r\n        apiKey='gjf2owkeqsrqujf2rj9osgukukffn7f1sggp5pjx09o48x9c'\r\n        init={ {\r\n          // adding textpattern plugin to enable adding lists using keyboard shortcuts\r\n          // adding lists plugin to enable adding lists using toolbar\r\n          // adding advlist -- advanced lists -- plugin to enable adding custom lists :(( roman, greek and alpha)) using toolbar\r\n          plugins: 'link image code textpattern lists advlist',\r\n          selector: \"textarea\",  // select the editor main element\r\n          // determine toolbar options\r\n          // as we use lists plugin, we can add numlist and bullist in toolbar\r\n          toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | code | numlist bullist',\r\n          // assign commands to specified keyboard shortcuts\r\n          textpattern_patterns: [\r\n            // unordered list\r\n            // adding unordered list item with empty circle bullet using specified keyboard shortcuts\r\n            { start: '* ', cmd: 'InsertUnorderedList', value: { 'list-style-type': 'circle' } },\r\n            // adding unordered list item with filled circle bullet using specified keyboard shortcuts\r\n            { start: '** ', cmd: 'InsertUnorderedList', value: { 'list-style-type': 'disc' } },\r\n            // adding unordered list item with filled square bullet using specified keyboard shortcuts\r\n            { start: '- ', cmd: 'InsertUnorderedList', value: { 'list-style-type': 'square' } },\r\n\r\n            // ordered list\r\n            // adding ordered list item with decimal number using specified keyboard shortcuts\r\n            { start: '1. ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'decimal' } },\r\n            { start: '1) ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'decimal' } },\r\n            // adding ordered list item with lower alphabetical letters using specified keyboard shortcuts\r\n            { start: 'a. ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'lower-alpha' } },\r\n            { start: 'a) ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'lower-alpha' } },\r\n            // adding ordered list item with upper alphabetical letters using specified keyboard shortcuts\r\n            { start: 'A. ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'upper-alpha' } },\r\n            { start: 'A) ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'upper-alpha' } },\r\n            // adding ordered list item with lower roman letters using specified keyboard shortcuts\r\n            { start: 'i. ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'lower-roman' } },\r\n            { start: 'i) ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'lower-roman' } },\r\n            // adding ordered list item with upper roman letters using specified keyboard shortcuts\r\n            { start: 'I. ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'upper-roman' } },\r\n            { start: 'I) ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'upper-roman' } },\r\n            // adding ordered list item with greek letters using specified keyboard shortcuts\r\n            { start: 'g. ', cmd: 'InsertOrderedList', value: { 'list-style-type': 'lower-greek' } }\r\n          ]\r\n        } }\r\n        onChange={ this.handleEditorChange }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}